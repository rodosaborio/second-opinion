# Second Opinion Environment Configuration
# ===============================================
# SETUP INSTRUCTIONS:
# 1. Copy this file: cp .env.example .env
# 2. Get OpenRouter API key: https://openrouter.ai/keys
# 3. Replace 'your_openrouter_api_key_here' with your actual key
# 4. Adjust cost limits for your budget (start conservative!)
# 5. Generate encryption keys (see instructions below)
# ===============================================

# =============================================================================
# API Keys (Required)
# =============================================================================

# OpenRouter API Key (REQUIRED - primary multi-model access)
# 1. Sign up at: https://openrouter.ai/
# 2. Get your key from: https://openrouter.ai/keys  
# 3. Key format: sk-or-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
OPENROUTER_API_KEY=your_openrouter_api_key_here

# Optional: Direct provider API keys for additional functionality
# Anthropic API Key
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# OpenAI API Key  
OPENAI_API_KEY=your_openai_api_key_here

# Google AI API Key
GOOGLE_API_KEY=your_google_api_key_here

# =============================================================================
# Local Development (Optional)
# =============================================================================

# LM Studio Configuration (for local model testing)
LMSTUDIO_BASE_URL=http://localhost:1234/v1

# =============================================================================
# Security Configuration (IMPORTANT)
# =============================================================================

# Database Encryption Key 
# GENERATE with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
# Example result: gAAAAABh...32-character-base64-encoded-key...
DATABASE_ENCRYPTION_KEY=your_generated_encryption_key_here

# Session encryption key (MUST be different from database key)
# GENERATE with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
SESSION_ENCRYPTION_KEY=your_session_encryption_key_here

# SECURITY NOTES:
# - Never commit .env to version control
# - Use different keys for database and sessions  
# - Rotate keys periodically
# - Keep keys secure and backed up safely

# =============================================================================
# Cost and Usage Limits (BUDGET PROTECTION)
# =============================================================================

# RECOMMENDED STARTING VALUES FOR TESTING:
# Start with conservative limits and increase as needed

# Default cost limit per request in USD (prevents runaway spending)
# Recommended: Start with $0.05, increase to $0.25 for complex tasks
COST_MANAGEMENT__DEFAULT_PER_REQUEST_LIMIT=0.05

# Daily spending limit in USD  
# Recommended: Start with $1.00, adjust based on usage patterns
COST_MANAGEMENT__DAILY_LIMIT=1.00

# Monthly spending limit in USD
# Recommended: Start with $10.00, scale up as you get comfortable
COST_MANAGEMENT__MONTHLY_LIMIT=10.00

# COST MONITORING TIPS:
# - Monitor usage at https://openrouter.ai/usage
# - Set billing alerts in your OpenRouter account
# - Use --verbose flag to see cost estimates before requests
# - Start small and scale up gradually

# =============================================================================
# Application Configuration
# =============================================================================

# Environment (development, staging, production)
ENVIRONMENT=development

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Data directory for local storage
DATA_DIR=./data

# Configuration directory
CONFIG_DIR=./config

# Prompts directory
PROMPTS_DIR=./prompts

# =============================================================================
# MCP Server Configuration
# =============================================================================

# MCP Server host (usually localhost for development)
MCP__HOST=localhost

# MCP Server port
MCP__PORT=8000

# Enable development mode (auto-reload, debug logging)
MCP__DEV_MODE=true

# =============================================================================
# Rate Limiting and Performance
# =============================================================================

# Requests per minute limit per API key
SECURITY__RATE_LIMIT_PER_MINUTE=60

# Maximum concurrent requests
SECURITY__MAX_CONCURRENT_REQUESTS=5

# Request timeout in seconds
API__TIMEOUT=30

# =============================================================================
# Security Options
# =============================================================================

# Enable input sanitization (recommended: true)
SECURITY__INPUT_SANITIZATION=true

# Enable response filtering (prevent API key leakage)
SECURITY__RESPONSE_FILTERING=true

# Enable usage analytics (track model performance)
ANALYTICS__ENABLED=true

# Minimum password/key length for validation
SECURITY__MIN_KEY_LENGTH=32

# =============================================================================
# Advanced Configuration
# =============================================================================

# Cache duration for model responses (in seconds, 0 to disable)
PERFORMANCE__CACHE_DURATION=0
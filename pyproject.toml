[project]
name = "second-opinion"
version = "1.0.0"
description = "AI tool for getting second opinions and optimizing model usage via MCP"
readme = "README.md"
license = "Apache-2.0"
authors = [{name = "rodosaborio"}]
repository = "https://github.com/rodosaborio/second-opinion"
homepage = "https://github.com/rodosaborio/second-opinion"
keywords = ["ai", "llm", "model-comparison", "mcp", "cost-optimization"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.12"
dependencies = [
    "fastmcp>=0.1.0",
    "pydantic>=2.0.0",
    "httpx>=0.25.0",
    "python-dotenv>=1.0.0",
    "cryptography>=41.0.0",
    "pyyaml>=6.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "pydantic-settings>=2.9.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.1.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
second-opinion = "second_opinion.cli.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Reduced addopts for faster development testing
addopts = [
    "--strict-markers",
    "--strict-config",
    "--timeout=60",  # Global timeout to prevent hanging tests
    "--tb=short",    # Shorter tracebacks for faster feedback
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security-focused tests",
    "network: marks tests that require network access",
    "timeout: custom timeout marker for specific tests",
]
# Test timeout configuration
timeout = 60
timeout_method = "thread"
# Async test configuration
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"


[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "S",  # flake8-bandit (security)
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "S106", "S107"]  # Allow assert and hardcoded passwords in tests

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
strict_concatenate = true

[tool.coverage.run]
source = ["src/second_opinion"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # Exclude logging statements that are primarily for debugging
    "logger\\.(debug|info)\\(",
    # Exclude complex import fallback strategies in MCP server
    "logger\\.warning\\(.*import.*failed",
    "logger\\.info\\(.*import strategy",
    # Exclude environment setup and path manipulation
    "sys\\.path\\.",
    "os\\.environ\\.",
    # Exclude CLI argument validation that's handled by typer
    "if.*is None:",
    "if not.*:",
]
show_missing = true
skip_covered = false

[tool.bandit]
exclude_dirs = ["tests"]

[dependency-groups]
dev = [
    "bandit[toml]>=1.8.5",
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-timeout>=2.1.0",
    "ruff>=0.12.0",
    "types-PyYAML>=6.0.4",
]
